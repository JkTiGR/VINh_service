import logging
import os
import sqlite3
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from fastapi import HTTPException
from api import app, DB_PATH
from liqpay import get_liqpay_url

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(env_path)

# Ensure TELEGRAM_BOT_TOKEN is defined
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = "http://127.0.0.1:8000"

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env!")

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç VINh Service. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
                                    "/create –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω [VIN] - –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
                                    "/clients - –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                                    "/order –ö–ª–∏–µ–Ω—Ç_ID –ó–∞–ø—á–∞—Å—Ç—å_ID –ö–æ–ª-–≤–æ - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
                                    "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
                                    "/orderinfo ID - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async def create_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω [VIN]")
        return

    name = args[0]
    phone = args[1]
    vin = args[2] if len(args) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"

    payload = {"name": name, "phone": phone, "vin": vin}
    try:
        response = requests.post(f"{API_URL}/clients/", json=payload)
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async def list_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{API_URL}/clients/")
        if response.status_code == 200:
            clients = response.json()
            message = "üìã **–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n"
            for client in clients:
                message += f"üîπ {client['id']}: {client['name']} - {client['phone']} (VIN: {client['vin']})\n"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order –ö–ª–∏–µ–Ω—Ç_ID –ó–∞–ø—á–∞—Å—Ç—å_ID –ö–æ–ª-–≤–æ")
        return

    client_id = args[0]
    part_id = args[1]
    quantity = int(args[2])

    payload = {
        "client_id": client_id,
        "payment_method": "cash",
        "delivery_address": "–ù–∞ –º–µ—Å—Ç–µ",
        "items": [{"part_id": part_id, "quantity": quantity, "price": 0}]
    }

    try:
        response = requests.post(f"{API_URL}/orders/", json=payload)
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{API_URL}/orders/")
        if response.status_code == 200:
            orders = response.json()
            message = "üì¶ **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n"
            for order in orders:
                message += f"üîπ {order['id']}: –ö–ª–∏–µ–Ω—Ç {order['client_id']}, —Å—Ç–∞—Ç—É—Å: {order['status']}\n"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async def order_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /orderinfo ID_–∑–∞–∫–∞–∑–∞")
        return

    order_id = args[0]

    try:
        response = requests.get(f"{API_URL}/orders/{order_id}")
        if response.status_code == 200:
            order = response.json()
            message = f"üì¶ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id}:**\n"
            message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_id']}\n"
            message += f"üõí –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            message += f"üí∞ –°—É–º–º–∞: {order['total_price']} UAH\n"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

async def pay_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ LiqPay."""
    args = context.args
    if len(args) < 1:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay ID_–∑–∞–∫–∞–∑–∞")
        return

    order_id = args[0]

    try:
        response = requests.get(f"{API_URL}/payment/{order_id}")
        if response.status_code == 200:
            payment_data = response.json()
            await update.message.reply_text(f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}:\n{payment_data['payment_url']}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("create", create_client))
    application.add_handler(CommandHandler("clients", list_clients))
    application.add_handler(CommandHandler("order", create_order))
    application.add_handler(CommandHandler("orders", list_orders))
    application.add_handler(CommandHandler("orderinfo", order_info))
    application.add_handler(CommandHandler("pay", pay_order))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    application.run_polling()

if __name__ == "__main__":
    main()
