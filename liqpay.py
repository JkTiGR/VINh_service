from fastapi import FastAPI, Request, HTTPException
import base64
import hashlib
import json
import sqlite3
import os
import logging
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
LIQPAY_PUBLIC_KEY = os.getenv("LIQPAY_PUBLIC_KEY")
LIQPAY_PRIVATE_KEY = os.getenv("LIQPAY_PRIVATE_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not LIQPAY_PUBLIC_KEY or not LIQPAY_PRIVATE_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: LIQPAY_PUBLIC_KEY –∏–ª–∏ LIQPAY_PRIVATE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
DB_PATH = "crm.db"

async def update_order_status(order_id: int, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ '{status}'")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

async def send_telegram_notification(order_id: int, status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö† Telegram Bot Token –∏–ª–∏ Chat ID –Ω–µ –∑–∞–¥–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return
    
    message = f"üì¢ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüõí –°—Ç–∞—Ç—É—Å: {status}"
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@app.post("/api/payment_callback")
async def payment_callback(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π LiqPay –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        body = await request.body()
        data_encoded = request.headers.get("X-Liqpay-Data")
        signature = request.headers.get("X-Liqpay-Signature")

        if not data_encoded or not signature:
            raise HTTPException(status_code=400, detail="‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        decoded_data = base64.b64decode(data_encoded).decode()
        payment_data = json.loads(decoded_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        expected_signature = base64.b64encode(
            hashlib.sha1((LIQPAY_PRIVATE_KEY + data_encoded + LIQPAY_PRIVATE_KEY).encode()).digest()
        ).decode()

        if signature != expected_signature:
            logger.warning("‚ö† –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞")
            return {"status": "error", "message": "Invalid signature"}

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        order_id = payment_data.get("order_id")
        status = payment_data.get("status")

        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")

        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if status in ["success", "sandbox", "wait_accept"]:
            await update_order_status(order_id, "paid")
            await send_telegram_notification(order_id, "–û–ø–ª–∞—á–µ–Ω–æ")
            return {"status": "success", "message": f"–ó–∞–∫–∞–∑ {order_id} –æ–ø–ª–∞—á–µ–Ω!"}

        return {"status": "pending", "message": f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return {"status": "error", "message": str(e)}
    
def get_liqpay_url(order_id: int, amount: float, currency="UAH"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ LiqPay."""
    data = {
        "public_key": LIQPAY_PUBLIC_KEY,
        "version": "3",
        "action": "pay",
        "amount": str(amount),
        "currency": currency,
        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
        "order_id": str(order_id),
        "sandbox": "1"  # 1 - —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, 0 - –±–æ–µ–≤–æ–π
    }

    # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Base64
    json_data = json.dumps(data)
    encoded_data = base64.b64encode(json_data.encode()).decode()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    sign_str = LIQPAY_PRIVATE_KEY + encoded_data + LIQPAY_PRIVATE_KEY
    signature = base64.b64encode(hashlib.sha1(sign_str.encode()).digest()).decode()

    payment_url = f"https://www.liqpay.ua/api/3/checkout?data={encoded_data}&signature={signature}"
    return payment_url

